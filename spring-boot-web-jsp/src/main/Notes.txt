Task
Spring Boot Hello World Example JSP
-------------------------------------------------------------------------------------------------------------------
A Spring Boot web application example, using embedded Tomcat + JSP template, and package as an executable WAR file.

Technologies used :
1.Spring Boot 1.4.2.RELEASE
2.Spring 4.3.4.RELEASE
3.Tomcat Embed 8.5.6
4.Maven 3
5.Java 8

===============================================================================================================
Display project depdencies:
>mvn dependency:tree


================================================================================================================
JSP + Resources + Static files
For JSP files, put in src/main/webapp/WEB-INF/jsp/

For static files like CSS or Javascript, put in /src/main/resources/static/
/src/main/resources/static/css/main.css
/src/main/resources/static/........
/src/main/resources/static/....


For properties files, put in /src/main/resources/
/src/main/resources/application.properties

Note
Spring Boot, convention over configuration, no need to declare the resource mapping like this(https://www.mkyong.com/spring-mvc/spring-mvc-how-to-include-js-or-css-files-in-a-jsp-page/).
The resource mapping just handles automatically – Read this article – Spring Boot Serving static content
================================================================================================================
Start the Spring Boot web app:
>mvn spring-boot:run
Open the browser type and localhost:8080

Maven package the project as an executable WAR file. A 18M++ WAR file will be generated in the target folder.
>mvn clean package
Run It,project$ java -jar target/spring-boot-web-jsp.war 
and access http://localhost:8080 again.



JSP limitations:
You can’t create an executable jar to run this embedded Tomcat + JSP web example, because of a hard coded file pattern 
in Tomcat. Read this Spring Boot – JSP limitation.

====================================================================================================================
Task
How to display all beans loaded by Spring Boot
---------------------------------------------------------------------------------------------------------------------
In Spring Boot, you can use appContext.getBeanDefinitionNames() to get all the beans loaded by the Spring container.

1. CommandLineRunner as Interface:-

package com.deependra;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

import java.util.Arrays;

@SpringBootApplication
public class Application implements CommandLineRunner {

    @Autowired
    private ApplicationContext appContext;

    public static void main(String[] args) throws Exception {
        SpringApplication.run(Application.class, args);
    }

    @Override
    public void run(String... args) throws Exception {

        String[] beans = appContext.getBeanDefinitionNames();
        Arrays.sort(beans);
        for (String bean : beans) {
            System.out.println(bean);
        }

    }

}
op:

application
customerRepository
customerRepositoryImpl
dataSource
dataSourceInitializedPublisher
dataSourceInitializer
dataSourceInitializerPostProcessor
emBeanDefinitionRegistrarPostProcessor
entityManagerFactory
entityManagerFactoryBuilder
hikariPoolDataSourceMetadataProvider
jdbcTemplate
jpaContext
//...

2. CommandLineRunner as Bean:-

package com.deependra;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import java.util.Arrays;

@SpringBootApplication
public class Application {

    public static void main(String[] args) throws Exception {
        SpringApplication.run(Application.class, args);
    }

    @Bean
    public CommandLineRunner run(ApplicationContext appContext) {
        return args -> {

            String[] beans = appContext.getBeanDefinitionNames();
            Arrays.stream(beans).sorted().forEach(System.out::println);

        };
    }

}
===========================================================================================================================
Task
Spring Boot – How to change Tomcat port

In Spring Boot, to change the embedded Tomcat initialized port (8080), update server.port properties.

1.Properties & Yaml(YAML (YAML Ain't Markup Language) )
  Update via a properties file.

  /src/main/resources/application.properties
  server.port=8888

  Update via a yaml file.

  /src/main/resources/application.yml
  server:
        port: 8888



2.EmbeddedServletContainerCustomizer
Update via code, this overrides properties and yaml settings.

CustomContainer.java
package com.deependra;
import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
import org.springframework.stereotype.Component;

@Component
public class CustomContainer implements EmbeddedServletContainerCustomizer {

	@Override
	public void customize(ConfigurableEmbeddedServletContainer container) {

		container.setPort(8888);

	}

}

3.Command Line
Update the port by passing the system properties directly.

Terminal
java -jar -Dserver.port=8888 spring-boot-example-1.0.jar



