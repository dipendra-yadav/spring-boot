
Spring Boot Hello World Example JSP:-
A Spring Boot web application example, using embedded Tomcat + JSP template, and package as an executable WAR file.

Technologies used :-
1.Spring Boot 1.4.2.RELEASE
2.Spring 4.3.4.RELEASE
3.Tomcat Embed 8.5.6
4.Maven 3
5.Java 8

===============================================================================================================
Display project dependencies:
>mvn dependency:tree

================================================================================================================
JSP + Resources + Static files
For JSP files, put in src/main/webapp/WEB-INF/jsp/

For static files like CSS or Javascript, put in /src/main/resources/static/
/src/main/resources/static/css/main.css
/src/main/resources/static/........
/src/main/resources/static/....


For properties files, put in /src/main/resources/
/src/main/resources/application.properties

Note
Spring Boot, convention over configuration, no need to declare the resource mapping like this(https://www.mkyong.com/spring-mvc/spring-mvc-how-to-include-js-or-css-files-in-a-jsp-page/).
The resource mapping just handles automatically – Read this article – Spring Boot Serving static content
================================================================================================================
Start the Spring Boot web app:
>mvn spring-boot:run
Open the browser type and localhost:8080

Maven package the project as an executable WAR file. A 18M++ WAR file will be generated in the target folder.
>mvn clean package
Run It,project$ java -jar target/spring-boot-web-jsp.war 
and access http://localhost:8080 again.



JSP limitations:
You can’t create an executable jar to run this embedded Tomcat + JSP web example, because of a hard coded file pattern 
in Tomcat. Read this Spring Boot – JSP limitation.

====================================================================================================================
How to display all beans loaded by Spring Boot

In Spring Boot, you can use appContext.getBeanDefinitionNames() to get all the beans loaded by the Spring container.

1. CommandLineRunner as Interface:-
package com.deependra;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

import java.util.Arrays;

@SpringBootApplication
public class Application implements CommandLineRunner {

    @Autowired
    private ApplicationContext appContext;

    public static void main(String[] args) throws Exception {
        SpringApplication.run(Application.class, args);
    }

    @Override
    public void run(String... args) throws Exception {

        String[] beans = appContext.getBeanDefinitionNames();
        Arrays.sort(beans);
        for (String bean : beans) {
            System.out.println(bean);
        }

    }

}
op:

application
customerRepository
customerRepositoryImpl
dataSource
dataSourceInitializedPublisher
dataSourceInitializer
dataSourceInitializerPostProcessor
emBeanDefinitionRegistrarPostProcessor
entityManagerFactory
entityManagerFactoryBuilder
hikariPoolDataSourceMetadataProvider
jdbcTemplate
jpaContext
//...

2. CommandLineRunner as Bean:-

package com.deependra;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import java.util.Arrays;

@SpringBootApplication
public class Application {

    public static void main(String[] args) throws Exception {
        SpringApplication.run(Application.class, args);
    }

    @Bean
    public CommandLineRunner run(ApplicationContext appContext) {
        return args -> {

            String[] beans = appContext.getBeanDefinitionNames();
            Arrays.stream(beans).sorted().forEach(System.out::println);

        };
    }

}

References:
CommandLineRunner JavaDoc
https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/CommandLineRunner.html
===========================================================================================================================
Spring Boot – How to change Tomcat port:-
In Spring Boot, to change the embedded Tomcat initialized port (8080), update server.port properties.

1.Properties & Yaml(YAML (YAML Ain't Markup Language) )
  Update via a properties file.

  /src/main/resources/application.properties
  server.port=8888

  Update via a yaml file.

  /src/main/resources/application.yml
  server:
        port: 8888



2.EmbeddedServletContainerCustomizer
Update via code, this overrides properties and yaml settings.

CustomContainer.java
package com.deependra;
import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
import org.springframework.stereotype.Component;

@Component
public class CustomContainer implements EmbeddedServletContainerCustomizer {

	@Override
	public void customize(ConfigurableEmbeddedServletContainer container) {

		container.setPort(8888);

	}

}

3.Command Line
Update the port by passing the system properties directly.

Terminal
java -jar -Dserver.port=8888 spring-boot-example-1.0.jar

=============================================================================================================
Spring Boot – How to change Context Path:-

In Spring Boot, to change the context path, update server.contextPath properties. 
The following examples update the context path from / to /deependra or http://localhost:8080/deependra

Note
By default, the context path is “/”.

1. Properties & Yaml
   Update via a properties file.

   /src/main/resources/application.properties
   server.port=8080
   server.contextPath=/deependra

2. Update via a yaml file.

   /src/main/resources/application.yml
   server:
         port: 8080
         contextPath: /deependra
         
         
         
2. EmbeddedServletContainerCustomizer
Update via code, this overrides properties and yaml settings.

CustomContainer.java
package com.mkyong;

import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
import org.springframework.stereotype.Component;

@Component
public class CustomContainer implements EmbeddedServletContainerCustomizer {

	@Override
	public void customize(ConfigurableEmbeddedServletContainer container) {

		container.setPort(8080);
		container.setContextPath("/deependra");

	}

}
       
       
3.Command Line
  Update the context path by passing the system properties directly.

Terminal
java -jar -Dserver.contextPath=/deependra spring-boot-example-1.0.jar



References
Spring Boot – Embedded servlet containers
Spring Boot – Externalized Configuration
https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html
=========================================================================================================
Spring Boot – Jetty as embedded server:-
By default, Spring Boot use Tomcat as the default embedded server, to change it to Jetty, just exclude Tomcat and 
include Jetty like this :

1. spring-boot-starter-web
pom.xml
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-web</artifactId>
		<exclusions>
			<exclusion>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-tomcat</artifactId>
			</exclusion>
		</exclusions>
	</dependency>

	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-jetty</artifactId>
	</dependency>


References
Spring Boot – Embedded servlet containers
Jetty Server
http://www.eclipse.org/jetty/

===============================================================================================================

Spring Boot – Show Hibernate SQL query:-
===============================================================================================================
Spring Boot – How to know which connection pool is used?

In Spring Boot, 
@Autowired javax.sql.DataSource, and you will know which database connection pool is using in the current 
running application.

1. Test Default
Spring Boot example to print a javax.sql.DataSource

Note
Read this official Spring Boot doc – Connection to a production database, to understand the algorithm 
for choosing a DataSource implementations – Tomcat pooling, HikariCP, Commons DBCP and Commons DBCP2.

package com.deependra;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import javax.sql.DataSource;
@SpringBootApplication
public class SpringBootConsoleApplication implements CommandLineRunner {

    @Autowired
    DataSource dataSource;

    public static void main(String[] args) throws Exception {
        SpringApplication.run(SpringBootConsoleApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {

        System.out.println("DATASOURCE = " + dataSource);

    }

}
DATASOURCE = org.apache.tomcat.jdbc.pool.DataSource@7c541c15...
Spring Boot is using Tomcat pooling by default.

2. Test HikariCP
To switch to another connection pool, for example HikariCP, just exclude the default and include the HikariCP 
in the classpath.


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.tomcat</groupId>
                    <artifactId>tomcat-jdbc</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- connection pools -->
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>2.6.0</version>
        </dependency>

DATASOURCE = HikariDataSource (HikariPool-1)
======================================================================================================










